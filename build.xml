<?xml version="1.0" encoding="utf-8"?>
<project name="smilkit-as3" default="test" basedir=".">
	<property environment="env" />
	
	<property name="instrument.metadata" value="flexunit-instrument.cvm" />
  <property name="instrument.report.flexcover" value="flexunit-instrument.cvr" />
  <property name="instrument.report.cobertura" value="coverage.xml" />
	
	<property name="main.src.loc" location="${basedir}/src/main" />
	<property name="test.src.loc" location="${basedir}/src/test" />
	<property name="example.src.loc" location="${basedir}/src/example" />
	
	<property name="lib.loc" location="${basedir}/libs" />
	<property name="output.loc" location="${basedir}/target" />
	
	<property name="bin.loc" location="${output.loc}/bin" />
	<property name="dist.loc" location="${output.loc}/dist" />
	
	<property name="report.loc" location="${output.loc}/report" />
	<property name="report.asdocs.loc" location="${report.loc}/asdocs" />
	<property name="report.flexcover.loc" location="${report.loc}/flexcover" />
	<property name="report.unit.loc" location="${report.loc}/unit" />
	
	<property name="FLEX_HOME" location="${env.FLEX_HOME}" />
	<property name="FLEX_COVER_VIEWER" location="${env.FLEX_COVER_VIEWER}" />
	<property name="FLEX_HEADLESS" location="${env.headless}" />
	
	<condition property="headless" value="${FLEX_HEADLESS}" else="false">
		<isset property="FLEX_HEADLESS" />
	</condition>
	
	<condition property="flash.player.loc" value="${env.FLASH_PLAYER}">
	  <isset property="env.FLASH_PLAYER" />
  </condition>
	<condition property="flash.player.loc" value="">
	  <os family="windows" />
  </condition>
  <condition property="flash.player.loc" value="/Applications/Adobe/Flash\ Player.app/Contents/MacOS/Flash\ Player">
	  <os family="mac" />
  </condition>
  <condition property="flash.player.loc" value="">
	  <os family="unix" />
  </condition>
  <fail unless="flash.player.loc">Path to the Flash Player was not set</fail>
  
  <echo>Flash Player: ${flash.player.loc}</echo>
	
	<taskdef resource="flexTasks.tasks" classpath="${FLEX_HOME}/ant/lib/flexTasks.jar" />
	<taskdef resource="flexUnitTasks.tasks" classpath="${lib.loc}/flexUnitTasks-4.1.0.53-sdk4.0.0.14159.jar" />
	
	<target name="usage" description="Displays main targets of the build recipe">
	  <java classname="org.apache.tools.ant.Main">
	    <arg value="-projecthelp" />
    </java>
  </target>
	
	<target name="clean" description="Cleans the generated build files from the target">
		<delete file="${main.src.loc}/FlexUnitApplication.mxml" /> <!-- when running the tests from flex builder, this file is created -->
		<delete dir="${basedir}/bin" /> <!-- delete flex builder builds -->
		<delete dir="${output.loc}" />
	</target>
	
	<target name="init" depends="clean">
		<mkdir dir="${output.loc}" />
		<mkdir dir="${bin.loc}" />
		<mkdir dir="${report.loc}" />
		<mkdir dir="${report.flexcover.loc}" />
		<mkdir dir="${report.asdocs.loc}" />
		<mkdir dir="${report.unit.loc}" />
		<mkdir dir="${dist.loc}" />
	</target>
	
	<target name="compile" depends="init" description="Compiles the main SMILKit-as3 SWC">
		<compc output="${bin.loc}/smilkit-as3.swc" fork="false">
			<source-path path-element="${main.src.loc}" />
			<include-sources dir="${main.src.loc}" includes="*" />
			<compiler.verbose-stacktraces>true</compiler.verbose-stacktraces>
			<compiler.headless-server>true</compiler.headless-server>
		</compc>
	</target>
	
	<target name="test-compile" description="Compiles the nessary SWF's for running the test specs">
		<mxmlc file="${test.src.loc}/SpecRunner.mxml" output="${bin.loc}/smilkit-as3-specs.swf">
			<source-path path-element="${main.src.loc}" />
			<source-path path-element="${test.src.loc}" />
			<library-path dir="${lib.loc}" append="true">
				<include name="flexunit-core-flex-4.0.0.53-sdk4.0.0.14159.swc" />
				<include name="flexunit-cilistener-4.1.0.53-sdk4.0.0.14159.swc" />
				<!--<include name="flexunit-flexcoverlistener-4.1.0.53-sdk4.0.0.14159.swc" />-->
			</library-path>
			<compiler.verbose-stacktraces>true</compiler.verbose-stacktraces>
			<compiler.headless-server>true</compiler.headless-server>
		</mxmlc>
	</target>
	
	<target name="example" depends="compile" description="Compiles the example player using the SMILKit-as3 library">
	  <mxmlc file="${example.src.loc}/SMILKitPlayer.as" output="${bin.loc}/smilkit-as3-player.swf" static-link-runtime-shared-libraries="true">
	    <source-path path-element="${example.src.loc}" />
	    <library-path dir="${bin.loc}" append="true">
	      <include name="smilkit-as3.swc" />
	    </library-path>
			<compiler.verbose-stacktraces>true</compiler.verbose-stacktraces>
			<compiler.headless-server>true</compiler.headless-server>
    </mxmlc>
	</target>
	
	<target name="example-run" description="Launch the compiled example player using the Flash Player">
	  <exec executable="${flash.player.loc}" spawn="true">
	   <arg line="${bin.loc}/smilkit-as3-player.swf" />
	  </exec>
  </target>
	
	<target name="asdocs" description="Generates asdocs from the SMILKit-as3 source">
		<delete file="${main.src.loc}/FlexUnitApplication.mxml" />
		<asdoc output="${report.asdocs.loc}"
			main-title="SMILKit-as3" window-title="SMILKit-as3"
			failonerror="true" fork="true" keep-xml="true" skip-xsl="false">
			<doc-sources path-element="${main.src.loc}" />
			<compiler.source-path path-element="${main.src.loc}" />
			<package-description-file>pkg-descriptions.xml</package-description-file>
			<!-- <templates-path path-element="${tools.loc}/templates/asdocs" /> -->
		</asdoc>
	</target>
	
	<target name="test" depends="compile,test-only,report" description="Builds and runs the test specs and generates reports" />
	
	<target name="build">
		<antcall target="clean" />
		<antcall target="compile" />
		<antcall target="test-only" />
		<antcall target="example" />
		<antcall target="asdocs" />
		<antcall target="report" />
	</target>
	
	<target name="package" description="Package the SMILKit-as3 build into a distributable zip">
		<copy file="${bin.loc}/smilkit-as3.swc" todir="${dist.loc}" />
		<copy file="${bin.loc}/smilkit-as3-specs.swf" todir="${dist.loc}" />
		<copy file="${bin.loc}/smilkit-as3-player.swf" todir="${dist.loc}" />
		<copy file="${basedir}/README.markdown" todir="${dist.loc}" />
		<copy todir="${dist.loc}/asdocs">
			<fileset dir="${report.loc}/asdocs" />
		</copy>
		
		<zip destfile="${output.loc}/${ant.project.name}.zip">
			<fileset dir="${dist.loc}" />
		</zip>
	</target>
	
	<target name="instrument" depends="compile,test-and-instrument,report" />
	
	<target name="test-and-instrument" depends="test-compile">
		<parallel>
			<sequential>
				<exec executable="${FLEX_COVER_VIEWER}" dir="${bin.loc}" spawn="true">
					<arg line="-output '${report.flexcover.loc}/${instrument.report.flexcover}'" />
					<arg line="'${lib.loc}/${instrument.metadata}'" />
				</exec>
				<waitfor checkevery="3" checkeveryunit="second">
					<available file="${report.flexcover.loc}/${instrument.report.flexcover}" />
				</waitfor>
				<tstamp>
	               <format property="instrument.timestamp" pattern="MM/dd/yyyy HH:mm:ss.SSS" />
	            </tstamp>
	          	<!--<xslt in="${report.flexcover.loc}/${instrument.report.flexcover}" out="${report.flexcover.loc}/${instrument.report.cobertura}" style="${basedir}/fc-to-cobertura.xsl">
	               <classpath>
	                  <fileset dir="${build.lib.loc}">
	                     <include name="saxon*.jar" />
	                  </fileset>
	               </classpath>
	               <param name="sourcePath" expression="${main.src.loc}" />
	               <param name="timestamp" expression="${instrument.timestamp}" />
	               <param name="version" expression="0.81" />
	            </xslt>-->
			</sequential>
			<sequential>
            	<sleep seconds="30" />
            	<flexunit swf="${bin.loc}/SpecRunner.swf" toDir="${report.unit.loc}"
						haltonfailure="false" verbose="true" localTrusted="true" headless="${headless}" />
			</sequential>
		</parallel>
	</target>
	
	<target name="test-only" depends="test-compile">
		<flexunit swf="${bin.loc}/smilkit-as3-specs.swf" toDir="${report.unit.loc}"
				haltonfailure="false" verbose="true" localTrusted="true" headless="${headless}" />
	</target>
	
	<target name="report" description="Generates HTML reports for the last ran test specs">
		<junitreport todir="${report.unit.loc}">
			<fileset dir="${report.unit.loc}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${report.unit.loc}/html" />
		</junitreport>
	</target>
</project>